/*Exception handling statements
You can throw exceptions using the throw statement and handle them using the try...catch statements.
throw statement
try...catch statement *

throw statement
Use the throw statement to throw an exception. A throw statement specifies the value to be thrown:
throw expression;
You may throw any expression, not just expressions of a specific type. The following code throws several exceptions of varying types: */
throw 'Error2';   // String type
throw 42;         // Number type
throw true;       // Boolean type
throw {toString: function() { return "I'm an object!"; } };

// Create an object type UserException
function UserException(message) {
    this.message = message;
    this.name = 'UserException';
  }
  
  // Make the exception convert to a pretty string when used as a string 
  // (e.g. by the error console)
  UserException.prototype.toString = function() {
    return this.name + ': "' + this.message + '"';
  }
  
  // Create an instance of the object type and throw it
  throw new UserException('Value too high');

/*  
try...catch statement
The try...catch statement marks a block of statements to try, and specifies one or more responses should an exception be thrown. 
If an exception is thrown, the try...catch statement catches it. */
function getMonthName(mo) {
    mo = mo - 1; // Adjust month number for array index (1 = Jan, 12 = Dec)
    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
                  'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    if (months[mo]) {
      return months[mo];
    } else {
      throw 'InvalidMonthNo'; //throw keyword is used here
    }
  }
  
  try { // statements to try
    monthName = getMonthName(myMonth); // function could throw exception
  }
  catch (e) {
    monthName = 'unknown';
    logMyErrors(e); // pass exception object to error handler -> your own function
  }

  //Best practice: When logging errors to the console inside a catch block, using console.error() rather than console.log() is advised for debugging, 
  //as it formats the message as an error and adds it to the list of error messages generated by the page. 


  //Utilizing Error objects
  //Depending on the type of error, you may be able to use the name and message properties to get a more refined message. 
  //The name property provides the general class of Error (such as DOMException or Error), while message generally provides a more succinct message than 
  //one would get by converting the error object to a string.
  function doSomethingErrorProne() {
    if (ourCodeMakesAMistake()) {
      throw (new Error('The message'));
    } else {
      doSomethingToGetAJavascriptError();
    }
  }

  try {
    doSomethingErrorProne();
  } catch (e) { // now we actually use console.error()
    console.error(e.name); // logs 'Error'
    console.error(e.message); // logs 'The message' or a JavaScript error message
  }